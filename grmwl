#!/bin/sh

pull(){
	sudo docker pull mackerel/graphite
}

build(){
	mkdir -p ~/.grmwl/$1
	mkdir -p ~/.grmwl/$1/log
	mkdir -p ~/.grmwl/$1/whisper
	touch ~/.grmwl/$1/id	
   	cp local_settings.py ~/.grmwl/$1/local_settings.py
	tmp=`sudo docker run -d --name $1 -v ~/.grmwl/$1/log:/var/log/graphite -v ~/.grmwl/$1/whisper:/var/lib/graphite/storage/whisper -v ~/.grmwl/$1/local_settings.py:/var/lib/graphite/lib/graphite/local_settings.py -p 8000:8000 -p 2003:2003 -p 2004:2004 mackerel/graphite`
	echo $tmp > ~/.grmwl/$1/id
}

install_collectd(){
	git submodule init
	git submodule update
	sudo apt-get install libmnl-dev libcurl4-gnutls-dev librtmp-dev libgnutls-dev libgcrypt11-dev
	cd collectd && ./build.sh 1>/dev/null && ./configure 1>/dev/null && sudo make && sudo make install
}

install_docker(){
	sudo apt-get install docker
	sudo apt-get install docker.io
}

install_arping(){
	sudo apt-get install iputils-arping
}

start(){
	cp collectd.conf ~/.grmwl/$1/collectd.conf	
	hostname=`hostname`
	sed -i "s/Hostname \"localhost\"/Hostname \"$hostname\"/g" ~/.grmwl/$1/collectd.conf
	interface=$2
	addr=`ifconfig $interface | grep 'inet addr:'| cut -d: -f2 | awk '{ print $1}')`
	bcast=`ifconfig $interface | grep 'Bcast:'| cut -d: -f3 | awk '{ print $1}'`
	subnet=`ifconfig $interface | grep 'inet addr:'| cut -d: -f2 | cut -d. -f1,2,3 | awk '{ print $1}'`
	gateway=`netstat -r | grep 'default' | awk '{ print $2}'`
	page="icanhazip.com"

	sed -i "s/<Plugin netlink><\/Plugin>/<Plugin netlink>\n\tInterface \"$interface\"\n\tVerboseInterface \"$interface\"\n\tQDisc \"eth0\" \"pfifo_fast-1:0\"\n\tClass \"ppp0\" \"htb-1:10\"\n\tFilter \"ppp0\" \"u32-1:0\"\n\tIgnoreSelected false\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf
	sed -i "s/<Plugin ping><\/Plugin>/<Plugin ping>\n\tHost \"$gateway\"\n\tInterval 0.0166\n\tTimeout 0.9\n\tTTL 255\n\tSourceAddress \"$addr\"\n\tDevice \"$interface\"\n\tMaxMissed -1\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf
	sed -i "s/<Plugin dns><\/Plugin>/<Plugin dns>\n\tInterface \"$interface\"\n\tIgnoreSource \"192.168.0.1\"\n\tSelectNumericQueryTypes false\n\t<\/Plugin>/g" ~/.grmwl/$1/collectd.conf

	sed -i "s/<Plugin ethstat><\/Plugin>/<Plugin ethstat>\n\tInterface \"$interface\"\n\tMap \"rx_csum_offload_errors\" \"if_rx_errors\" \"checksum_offload\"\n\tMap \"multicast\" \"if_multicast\"\n\tMappedOnly false\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf

	sed -i "s/<Plugin ethsys><\/Plugin>/<Plugin ethsys>\n\tInterface \"$interface\"\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf

	sed -i "s/<Plugin interface><\/Plugin>/<Plugin interface>\n\tInterface \"$interface\"\n\tIgnoreSelected false\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf

	sed -i "s/<Plugin curl><\/Plugin>/<Plugin curl>\n\t<Page \"$page\">\n\t\tURL \"$page\"\n\t\tVerifyPeer false\n\t\tVerifyHost false\n\t\tMeasureResponseTime true\n\t\t<Match>\n\t\t\tRegex \"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\"\n\t\t<\/Match>\n\t<\/Page>\n<\/Plugin>/g" ~/.grmwl/$1/collectd.conf
	sudo /opt/collectd/sbin/collectd -C ~/.grmwl/$1/collectd.conf
	sudo ./arpmonitoring $2 &
	echo $! > ~/.grmwl/$1/arpmonitoring.pid
	sudo ./dnsmonitoring $2 &
	echo $! > ~/.grmwl/$1/dnsmonitoring.pid
	sudo docker start `cat ~/.grmwl/$1/id`
	echo "[+] Open your browser and go to http://localhost:8000/ to open Graphite UI."
}

stop(){
	ps xa -o pid,cmd | grep "/opt/collectd/sbin/collectd -C ~/.grmwl/$1/collectd.conf" | cut -c 1- | cut -d\  -f 1 | xargs --no-run-if-empty sudo kill
	sudo docker stop `cat ~/.grmwl/$1/id`
	sudo kill `cat ~/.grmwl/$1/arpmonitoring.pid`
	sudo kill `cat ~/.grmwl/$1/dnsmonitoring.pid` 
}

clean_container(){
	sudo docker ps -a --no-trunc | grep `cat ~/.grmwl/$1/id` | awk '{print $1}' | xargs --no-run-if-empty sudo docker rm -f
}

if [ "$1" = "init" ]; then
	install_collectd
	install_docker	
	install_arping
elif [ "$1" = "list" ]; then
	for i in $(ls ~/.grmwl); do 
                if sudo docker ps --no-trunc | grep `cat ~/.grmwl/$i/id` 2>&1 >/dev/null; then
			echo "[+] $i - running"
		else
			echo "[+] $i - stopped"
		fi
	done
elif [ "$1" = "create" ]; then
	if [ -x ~/.grmwl/$2/id ]; then
		echo "[!] Project already created."
	else
		echo "[+] Creating project $2..."
		pull
		build $2
		python createdashboards.py
		stop $2
	fi
	
elif [ "$1" = "start" ]; then
	if [ -x ~/.grmwl/$2/id ]; then
		echo "[!] Project does not exist, you need to create it first ($0 create $2)"
	else
		if [ -z "$3" ]; then
			echo "You need to specify an interface that will be monitored."
		else
			if sudo docker ps --no-trunc | grep `cat ~/.grmwl/$2/id` 2>&1 >/dev/null; then
				echo "[!] Project $2 is already running."
			else	
				echo "[+] Running project $2..."
				start $2 $3
			fi
		fi
	fi
elif [ "$1" = "stop" ]; then
	if [ -x ~/.grmwl/$2/id ]; then
		echo "[!] Project does not exist, you need to create it first ($0 create $2)"
	else
		echo "[+] Stopping project $2..."
		stop $2
	fi
elif [ "$1" = "restart" ]; then
	stop $2
	start $2
elif [ "$1" = "delete" ]; then
	if [ -x ~/.grmwl/$2/id ]; then
		echo "[!] Project $2 does not exist."
	else
		echo "[+] Deleting project $2..."
		clean_container $2
		sudo rm ~/.grmwl/$2 -R
	fi
else
	echo
	echo "Usage"
	echo "\t* init: initialize repository and dependencies"
	echo "\t* list: list all containers built with this tool"
	echo "\t* build [project]: build the container and config files for project [project]"
	echo "\t* delete [project]: delete container and config files of project [project]"
	echo "\t* start [if], stop, restart [project]: command to start monitoring interface [if], stop and restart the project container"
	echo
fi

